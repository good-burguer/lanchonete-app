name: CI Dev - Build, Push & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

permissions:
  id-token: write    # OIDC
  contents: read

env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ROLE_TO_ASSUME: ${{ vars.AWS_ROLE_TO_ASSUME }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
  K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }}
  IMAGE_TAG: ${{ github.sha }}-amd64
  IMAGE_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ github.sha }}-amd64

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists (idempotent)
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-names "$ECR_REPOSITORY" >/dev/null

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (linux/amd64)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t "$IMAGE_URI" \
            --push .

      - name: Install kubectl
        run: |
          curl -sSLo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Update kubeconfig (EKS)
        run: |
          aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "$AWS_REGION"

      - name: Deploy - set image & wait rollout
        run: |
          # container name Ã© "app" no Deployment
          kubectl -n "$K8S_NAMESPACE" set image deployment/lanchonete-app app="$IMAGE_URI"
          kubectl -n "$K8S_NAMESPACE" rollout status deployment/lanchonete-app --timeout=180s

      - name: Show deployed image
        run: |
          kubectl -n "$K8S_NAMESPACE" get deploy lanchonete-app -o jsonpath='{.spec.template.spec.containers[0].image}{"\n"}'